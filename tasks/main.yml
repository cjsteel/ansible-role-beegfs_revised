---

- name: Ensure the BeeGFS package repo is defined
  get_url:
    url: "{{ beegfs_repo_url }}"
    dest: "{{ beegfs_repo_file }}"
  register: beegfs_repo_defined
  until: beegfs_repo_defined is succeeded
  retries: 3
  when: beegfs_state == 'present'

- name: add apt key for debian family machines
  apt_key:
    state: '{{ beegfs_state }}'
    url: "{{ beegfs_repo_key }}"
  register: beegfs_apt_key_added
  until: beegfs_apt_key_added is succeeded
  retries: 3

- name: add rpm key for redhat family machines
  rpm_key:
    state: '{{ beegfs_state }}'
    key: "{{ beegfs_repo_key }}"
    validate_certs: no
  ignore_errors: yes
  register: beegfs_rpm_key_added
  until: beegfs_rpm_key_added is succeeded
  retries: 3
 
- name: add zypper repository
  zypper_repository:
    state: '{{ beegfs_state }}'
    name: jenkins
    repo: "{{ jenkins_zypper_repository_repo }}"
  when:
    - ansible_pkg_mgr == "zypper"

- name: install beegfs requirements
  package:
    name: "{{ beegfs_requirements }}"
    state: '{{ beegfs_state }}'
  register: beegfs_install_requirements
  until: beegfs_install_requirements is succeeded
  retries: 3

## update package managers

- name: update cache (apt)
  apt:
    update_cache: yes
  when:
    - ansible_pkg_mgr == "apt"
  until: update_all_software_apt is succeeded
  retries: 3

# tasks file for beegfs
## RDMA
#- include: rdma.yml
#  when: beegfs_rdma | bool


## Managment

- name: install beegfs Management service packages
  package:
    name: "{{ beegfs_management_requirements }}"
    state: '{{ beegfs_state }}'
  register: beegfs_install_management_requirements
  until: beegfs_install_management_requirements is succeeded
  retries: 3
  when: beegfs_enable.management | default(false) | bool

- name: Create directory for BeeGFS management service data
  file:
    path: "{{ beegfs_mgmt_path }}"
    state: directory
  become: true
  notify: Restart BeeGFS mgmt service

- name: Run management service setup script
  command: "/opt/beegfs/sbin/beegfs-setup-mgmtd -p {{ beegfs_mgmt_path }} -f"
  args:
    creates: "{{ beegfs_mgmt_path }}/originalNodeID"
  become: true
  notify: Restart BeeGFS mgmt service

- name: Specify connInterfacesFile
  lineinfile:
    path: /etc/beegfs/beegfs-mgmtd.conf
    regexp: "^connInterfacesFile"
    line: "connInterfacesFile           = /etc/beegfs/connInterfacesFile"
  become: true
  notify: Restart BeeGFS mgmt service

## ADMON

#- include: admon.yml
#  when: beegfs_enable.admon | default(false) | bool

# Install required packages

## Install Metadata Server packages

- name: install beegfs Metadata service packages
  package:
    name: "{{ beegfs_metadata_requirements }}"
    state: '{{ beegfs_state }}'
  register: beegfs_install_metadata_requirements
  until: beegfs_install_metadata_requirements is succeeded
  retries: 3
  when: beegfs_enable.metadata | default(false) | bool

- name: Create directory for BeeGFS metadata
  file:
    path: "{{ beegfs_meta_path }}"
    state: directory
  become: true
  notify: Restart BeeGFS meta service

- name: Prepare metadata block storage
  block:
    - name: Ensure storage device is not currently mounted
      mount:
        path: "{{ beegfs_meta_path }}"
        state: unmounted
      notify: Restart BeeGFS meta service
    - name: Format filesystem
      vars:
        meta_fstype: "{{ beegfs_meta_fstype | default(beegfs_fstype) }}"
      filesystem:
        dev: "{{ beegfs_meta_dev }}"
        fstype: "{{ meta_fstype }}"
        force: "{{ beegfs_force_format }}"
      notify: Restart BeeGFS meta service
    - name: Mount filesystem
      vars:
        meta_fstype: "{{ beegfs_meta_fstype | default(beegfs_fstype) }}"
      mount:
        src: "{{ beegfs_meta_dev }}"
        path: "{{ beegfs_meta_path }}"
        fstype: "{{ meta_fstype }}"
        state: mounted
      notify: Restart BeeGFS meta service
  become: true
  when:
    - beegfs_meta_dev is defined
    - beegfs_meta_dev != None

- name: Run metadata service setup script
  command: "/opt/beegfs/sbin/beegfs-setup-meta -p {{ beegfs_meta_path }} -m {{ beegfs_mgmt_host }} -f"
  args:
    creates: "{{ beegfs_meta_path }}/originalNodeID"
  become: true
  notify: Restart BeeGFS meta service

- name: Specify connInterfacesFile
  lineinfile:
    path: /etc/beegfs/beegfs-meta.conf
    regexp: "^connInterfacesFile"
    line: "connInterfacesFile           = /etc/beegfs/connInterfacesFile"
  become: true
  notify: Restart BeeGFS meta service

## Install Storage Service(s)

- name: install beegfs Storage service packages
  package:
    name: "{{ beegfs_storage_requirements }}"
    state: '{{ beegfs_state }}'
  register: beegfs_install_storage_requirements
  until: beegfs_install_storage_requirements is succeeded
  retries: 3
  when: beegfs_enable.storage | default(false) | bool

- include: oss.yml
  vars:
    oss_dev: "{{ oss_item.dev | default('') }}"
    oss_dev_is_defined: "{{ oss_item.dev is defined }}"
    oss_path: "{{ oss_item.path | default(beegfs_oss_path_prefix + oss_dev) }}"
    oss_port: "{{ oss_item.port }}"
    oss_replace: "{{ '-r' if (oss_item == beegfs_oss|first or beegfs_oss_multi_port) else '' }}"
  with_items: "{{ beegfs_oss }}"
  loop_control:
    loop_var: oss_item
  failed_when: >
    (oss_item.dev is not defined and oss_item.path is not defined)
  when: beegfs_enable.storage | default(false) | bool

## Install Tuning stuff

# - include: tuning.yml
#  when: beegfs_enable.tuning | default(false) | bool

- name: BeeGFS tuning parameters
  sysctl:
    name: "{{ item.key }}"
    value: "{{ item.value }}"
    state: present
    reload: true
    sysctl_set: true
  with_items:
    - {key: 'vm.dirty_background_ratio', value: '5'}
    - {key: 'vm.dirty_ratio', value: '20'}
    - {key: 'vm.vfs_cache_pressure', value: '50'}
    - {key: 'vm.min_free_kbytes', value: '262144'}
    - {key: 'vm.zone_reclaim_mode', value: '1'}
  when: beegfs_enable.tuning | default(false) | bool
#  become: true

- name: Tune beegfs_oss_tunable devices
  block:
    - name: Copy beegfs-oss-tuning.sh to /opt/beegfs/
      template:
        src: beegfs-oss-tuning.sh.j2
        dest: /opt/beegfs/beegfs-oss-tuning.sh
        mode: a+x
      notify: Restart BeeGFS tuning service
    - name: Copy beegfs-oss-tuning.service to /etc/systemd/system/
      copy:
        src: beegfs-oss-tuning.service
        dest: /etc/systemd/system/
      notify: Restart BeeGFS tuning service
  when: beegfs_enable.tuning | default(false) | bool
#  become: true

## Install Client Serivce(s)

- name: install beegfs client packages
  package:
    name: "{{ beegfs_client_requirements }}"
    state: '{{ beegfs_state }}'
  register: beegfs_install_client_requirements
  until: beegfs_install_client_requirements is succeeded
  retries: 3
  when: beegfs_enable.client | default(false) | bool

- include: client.yml
  vars:
    client_mgmt_host: "{{ client_item.mgmt_host | default(beegfs_mgmt_host) }}"
    client_path: "{{ client_item.path }}"
    client_port: "{{ client_item.port }}"
  with_items: "{{ beegfs_client }}"
  loop_control:
    loop_var: client_item
  when: beegfs_enable.client | default(false) | bool

## Networking

- name: Create connInterfacesFile
  template:
    src: connInterfacesFile.j2
    dest: /etc/beegfs/connInterfacesFile
  become: true

## Enable services

- name: Start and enable BeeGFS server services
  service:
    name: "{{ item.name }}"
    enabled: true
    state: "{{ item.state | default(omit) }}"
  become: true
  when: item.enable | bool
  with_items:
    - { name: beegfs-mgmtd, enable: "{{ beegfs_enable.management }}", state: started }
    - { name: beegfs-meta, enable: "{{ beegfs_enable.metadata }}", state: started }
    - { name: beegfs-admon, enable: "{{ beegfs_enable.admon }}", state: started }
    - { name: beegfs-oss-tuning, enable: "{{ beegfs_enable.tuning }}" }

- name: Start and enable BeeGFS storage services
  service:
    name: "beegfs-storage@{{ item.port }}"
    enabled: true
    state: started
  become: true
  when: beegfs_enable.storage | bool
  with_items: "{{ beegfs_oss }}"

- name: Start and enable BeeGFS client services
  service:
    name: "{{ item.name }}"
    enabled: true
    state: started
  become: true
  when: item.enable | bool
  with_items:
    - { name: beegfs-helperd, enable: "{{ beegfs_enable.client }}" }
    - { name: beegfs-client, enable: "{{ beegfs_enable.client }}" }
  retries: 3
  delay: 3
  register: result
  until: result is success
...

